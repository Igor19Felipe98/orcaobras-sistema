
// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String?
  emailVerified DateTime?
  image         String?
  role          String    @default("USER")
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt
  accounts      Account[]
  sessions      Session[]
  budgets       Budget[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Input {
  id              String           @id @default(cuid())
  code            String           @unique
  description     String
  price           Float
  unit            String
  category        String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  compositions    CompositionInput[]
}

model Composition {
  id                String               @id @default(cuid())
  code              String               @unique
  description       String
  unit              String
  productivityCoef  Float                @default(1.0)
  createdAt         DateTime             @default(now())
  updatedAt         DateTime             @updatedAt
  inputs            CompositionInput[]
  budgetItems       BudgetItem[]
}

model CompositionInput {
  id            String      @id @default(cuid())
  compositionId String
  inputId       String
  quantity      Float
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  composition   Composition @relation(fields: [compositionId], references: [id], onDelete: Cascade)
  input         Input       @relation(fields: [inputId], references: [id], onDelete: Cascade)

  @@unique([compositionId, inputId])
}

model Budget {
  id          String       @id @default(cuid())
  name        String
  description String?
  area        Float?
  location    String?
  userId      String
  createdAt   DateTime     @default(now())
  updatedAt   DateTime     @updatedAt
  
  user        User         @relation(fields: [userId], references: [id], onDelete: Cascade)
  items       BudgetItem[]
}

model BudgetItem {
  id            String      @id @default(cuid())
  budgetId      String
  compositionId String
  quantity      Float
  unitPrice     Float?
  totalPrice    Float?
  createdAt     DateTime    @default(now())
  updatedAt     DateTime    @updatedAt
  
  budget        Budget      @relation(fields: [budgetId], references: [id], onDelete: Cascade)
  composition   Composition @relation(fields: [compositionId], references: [id], onDelete: Cascade)
}
