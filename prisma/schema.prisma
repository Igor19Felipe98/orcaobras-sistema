generator client {
    provider = "prisma-client-js"
    binaryTargets = ["native", "linux-musl-arm64-openssl-3.0.x"]
    output = "/home/ubuntu/orcamento_obras/app/node_modules/.prisma/client"
}

datasource db {
    provider = "postgresql"
    url      = env("DATABASE_URL")
}

// NextAuth.js Models
model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String    @unique
  password      String
  emailVerified DateTime?
  image         String?
  isAdmin       Boolean   @default(false)
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  accounts      Account[]
  sessions      Session[]
  orcamentos    Orcamento[]
  insumos       Insumo[]
  composicoes   Composicao[]
  produtos      Produto[]
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// Orçamentos e Estrutura Hierárquica
model Orcamento {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  versao      String   @default("1.0")
  status      String   @default("RASCUNHO") // RASCUNHO, FINALIZADO, APROVADO
  valorTotal  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId     String
  user       User       @relation(fields: [userId], references: [id], onDelete: Cascade)
  produtos   Produto[]
}

model Produto {
  id          String   @id @default(cuid())
  codigo      String   
  nome        String
  descricao   String?
  area        Float?   // m2
  valorTotal  Float    @default(0)
  observacoes String?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  orcamentoId String?
  orcamento   Orcamento? @relation(fields: [orcamentoId], references: [id], onDelete: Cascade)
  titulos     Titulo[]
  
  @@unique([codigo, userId])
}

model Titulo {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  ordem       Int      @default(0)
  valorTotal  Float    @default(0)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  produtoId   String
  produto     Produto     @relation(fields: [produtoId], references: [id], onDelete: Cascade)
  subtitulos  Subtitulo[]
}

model Subtitulo {
  id          String   @id @default(cuid())
  nome        String
  descricao   String?
  ordem       Int      @default(0)
  valorTotal  Float    @default(0)
  parentId    String?  // Para subtítulos aninhados
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  tituloId    String
  titulo      Titulo      @relation(fields: [tituloId], references: [id], onDelete: Cascade)
  parent      Subtitulo?  @relation("SubtituloHierarchy", fields: [parentId], references: [id])
  children    Subtitulo[] @relation("SubtituloHierarchy")
  composicoes Composicao[]
}

model Composicao {
  id            String   @id @default(cuid())
  codigo        String   
  nome          String
  descricao     String?
  tipo          String   // SERVICO, MATERIAL
  quantidade    Float?
  unidade       String
  precoUnitario Float    @default(0)
  precoTotal    Float    @default(0)
  observacoes   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  subtituloId String?
  subtitulo   Subtitulo? @relation(fields: [subtituloId], references: [id], onDelete: Cascade)
  insumos     ComposicaoInsumo[]
  
  @@unique([codigo, userId])
}

model Insumo {
  id            String   @id @default(cuid())
  codigo        String   
  nome          String
  descricao     String?
  tipo          String   // MATERIAL, SERVICO, EQUIPAMENTO
  unidade       String
  precoUnitario Float
  fornecedor    String?
  observacoes   String?
  createdAt     DateTime @default(now())
  updatedAt     DateTime @updatedAt
  
  userId      String?
  user        User?     @relation(fields: [userId], references: [id], onDelete: Cascade)
  composicoes ComposicaoInsumo[]
  
  @@unique([codigo, userId])
}

model ComposicaoInsumo {
  id          String   @id @default(cuid())
  coeficiente Float    // Quantidade do insumo por unidade de composição
  precoTotal  Float    @default(0) // coeficiente × preço unitário do insumo
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  
  composicaoId String
  insumoId     String
  composicao   Composicao @relation(fields: [composicaoId], references: [id], onDelete: Cascade)
  insumo       Insumo     @relation(fields: [insumoId], references: [id], onDelete: Cascade)
  
  @@unique([composicaoId, insumoId])
}

model UnidadeMedida {
  id        String   @id @default(cuid())
  codigo    String   @unique
  nome      String
  descricao String?
  tipo      String   // AREA, VOLUME, PESO, TEMPO, QUANTIDADE
  createdAt DateTime @default(now())
}
